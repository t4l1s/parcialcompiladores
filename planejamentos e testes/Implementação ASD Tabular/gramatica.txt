¬start@ := ¬registro_declaracao@ ¬constantes_declaracao@ ¬variaveis_declaracao@ ¬funcao_declaracao@ ¬algoritmo_declaracao@
¬registro_declaracao@ := registro token_identificador { ¬declaracao_reg@ } ¬registro_declaracao@$Ɛ
¬declaracao_reg@ := ¬declaracao@ ; ¬declaracao_reg@$Ɛ
¬declaracao@ := ¬tipo_primitivo@ token_identificador
¬tipo_primitivo@ := cadeia$real$inteiro$char$booleano
¬constantes_declaracao@ := constantes { ¬declaracao_const@ }
¬declaracao_const@ := ¬declaracao@ = ¬valor_primitivo@ ; ¬declaracao_const@$Ɛ
¬valor_primitivo@ := token_cadeia$token_real$token_inteiro$token_char$verdadeiro$falso
¬variaveis_declaracao@ := variaveis { ¬declaracao_var@ }
¬declaracao_var@ := ¬declaracao@ ¬identificador_deriva@ ; ¬declaracao_var@$token_identificador token_identificador ; ¬declaracao_var@ $Ɛ
¬identificador_deriva@ := [ token_inteiro ] ¬matriz@$¬inicializacao@$Ɛ
¬matriz@ := [ token_inteiro ]$Ɛ
¬inicializacao@ := = ¬valor_primitivo@$Ɛ
¬funcao_declaracao@ := funcao ¬tipo_return@ token_identificador ( ¬decl_param@ ) { ¬deriva_cont_funcao@ } ¬funcao_declaracao@$Ɛ
¬decl_param@ := ¬declaracao@ ¬identificador_param_deriva@ ¬deriva_param@$registro token_identificador ¬deriva_param@
¬deriva_param@ := , ¬decl_param@$Ɛ
¬identificador_param_deriva@ := [ ] ¬matriz_param@$Ɛ
¬matriz_param@ := [ ]$Ɛ
¬deriva_cont_funcao@ := ¬variaveis_declaracao@ ¬decl_comandos@ retorno ¬return_deriva@ ;$¬decl_comandos@ retorno ¬return_deriva@ ;
¬decl_comandos@ := ¬comandos@ ¬decl_comandos@$Ɛ
¬tipo_return@ := ¬tipo_primitivo@$registro$vazio
¬return_deriva@ := vazio$token_identificador ¬identificador_param_deriva@$¬valor_primitivo@
¬algoritmo_declaracao@ := algoritmo { ¬deriva_cont_principal@ }
¬deriva_cont_principal@ := ¬declaracao_var@ ¬decl_comandos@$¬decl_comandos@$Ɛ
¬comandos@ := ¬se_declaracao@$¬enquanto_declaracao@$¬para_declaracao@$¬escreva_declaracao@$¬leia_declaracao@$¬exp_aritmetica@$Ɛ
¬se_declaracao@ := se ( ¬exp_rel_bol@ ) { ¬decl_comandos@ } ¬senao_decl@
¬senao_decl@ := senão { ¬decl_comandos@ }$Ɛ
¬enquanto_declaracao@ := enquanto ( ¬exp_rel_bol@ ) { ¬decl_comandos@ }
¬para_declaracao@ := para ( token_identificador = token_inteiro ; token_identificador ¬op_relacional@ token_inteiro ; token_identificador ¬op_cont@ ; ) { ¬decl_comandos@ }
¬escreva_declaracao@ := escreva ( ¬exp_escreva@ ) ;
¬exp_escreva@ := ¬exp_imprime@ ¬exp_escreva_deriva@ ¬exp_escreva@$Ɛ
¬exp_escreva_deriva@ := , ¬exp_imprime@$Ɛ
¬exp_imprime@ := token_cadeia$token_char$token_identificador ¬identificador_imp_arm_deriva@$( ¬exp_simples@ )
¬identificador_imp_arm_deriva@ := . token_identificador$[ token_inteiro ] ¬matriz@$Ɛ
¬leia_declaracao@ := leia ( ¬exp_leia@ ) ;
¬exp_leia@ := ¬exp_armazena@ ¬exp_leia_deriva@ ¬exp_leia@$Ɛ
¬exp_leia_deriva@ := , ¬exp_armazena@$Ɛ
¬exp_armazena@ := token_identificador ¬identificador_imp_arm_deriva@
¬exp_rel_bol@ := ¬exp_simples@ ¬op_relacional@ ¬exp_simples@ ¬exp_rel_deriva@
¬exp_rel_deriva@ := ¬op_bolleano@ ¬exp_simples@ ¬op_relacional@ ¬exp_simples@ ¬exp_rel_deriva@$Ɛ
¬op_relacional@ := < ¬op_rel_deriva@$> ¬op_rel_deriva@$==$!=
¬op_rel_deriva@ := =$Ɛ
¬op_bolleano@ := &&$||
¬exp_aritmetica@ := token_identificador = ¬exp_simples@
¬exp_simples@ := ¬op_ss@ ¬termo@ ¬termo_deriva@$¬termo@ ¬termo_deriva@
¬termo_deriva@ := + ¬op_soma_deriva@$- ¬op_sub_deriva@$Ɛ
¬op_soma_deriva@ := ¬termo@ ¬termo_deriva@$+
¬op_sub_deriva@ := ¬termo@ ¬termo_deriva@$-
¬op_ss@ := +$-
¬op_cont@ := ++$--
¬termo@ := ¬fator@ ¬fator_deriva@
¬fator_deriva@ := ¬op_md@ ¬fator@ ¬fator_deriva@$Ɛ
¬op_md@ := *$/
¬fator@ := token_identificador ¬identificador_imp_arm_deriva@$token_inteiro$( ¬exp_simples@ )